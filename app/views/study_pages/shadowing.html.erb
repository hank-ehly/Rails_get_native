<script>

	// load javascript YT API
	var tag = document.createElement('script');
  tag.src = "https://www.youtube.com/iframe_api";
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);



	var player;
	function onYouTubeIframeAPIReady() {
	  player = new YT.Player('player', {
	    height: '390',
	    width: '640',
	    videoId: '<%= @video_url %>',
	    playerVars: 
	    {
	      controls: 0,
	      modestbranding: 1,
	      showinfo: 0,
	      autoplay: 1,
	      loop: 1,
	      playlist: '<%= @video_url %>',
	      enablejsapi: 1
	    },
	    events: {
	      'onReady': onPlayerReady,
	      'onStateChange': onPlayerStateChange
	    }
	  });
	}


  function onPlayerReady(event) {
    // event.target.playVideo();
  }

  function onPlayerStateChange(event) {
  	// console.log(event.data);
    if (event.data == YT.PlayerState.PLAYING) {
      incrementTimeInterval = setInterval(incrementTime, 1000);
    } else if (event.data == YT.PlayerState.PAUSED) {
    	clearInterval(incrementTimeInterval);
    }
  }

$(document).ready(function() {

  // var button = document.getElementById('playPause');
  $('button.play_pause').on('click', function() {

  	// ********* GET DURATION
  	// console.log(player.getDuration()); <-- get video duration

  	// ********* GET PLAYER STATE **********
  	// console.log(player.getPlayerState());
  	// console.log(YT.PlayerState.PLAYING);


  	if (player.getPlayerState() == YT.PlayerState.PAUSED) {
  		player.playVideo();
      $('#paused-overlay').hide();
  		// incrementTimeInterval = setInterval(incrementTime, 1000);
  	} else if (player.getPlayerState() == YT.PlayerState.PLAYING) {
  		player.pauseVideo();
      if ($('#options-overlay').css('display') == 'block') {
        return false;
      } else {
        $('#paused-overlay').show();  
      }
  		// clearInterval(incrementTimeInterval);
  	}

  })

  $('button.btn.btn-default').on('click', function() {
  	if (player.getPlayerState() == YT.PlayerState.PLAYING) {
  		player.pauseVideo();
      $('#paused-overlay').show();
  		// clearInterval(incrementTimeInterval);
  	}
  })

  // event.data == YT.PlayerState.PLAYING
  // event.data returns integer corresponding to YT.PlayerState.PLAYING/PAUSED/etc...
  // to check player state, echo event.data


  });

</script>

<div class="study_pages shadowing main">
	<div class="container">

		<h1>Shadowing</h1>

		<button type="button" id="shadowingPopover" class="btn btn-default ppover">Instructions <span class="caret"></span></button>

		<div class="video_instance">
			<div class="video-container">
				<div id="player"></div>
        <div id="paused-overlay"></div>
        <div id="options-overlay">
          <p class="link"><%= link_to "Continue to Speaking", action: 'speaking', id: @playlist_video.id %></p>
          <p>OR</p>
          <p class="link"><%= link_to "Continue Shadowing", action: 'shadowing', id: @playlist_video.id %></p>
        </div>
  		</div>
    </div>

		<div class="video_info">
			<span id="countdown" class="countdown"><%= session[:study_time] %></span> <!-- <span class="paused_alert">paused</span> -->
			<%= link_to "Continue", action: 'speaking', id: @playlist_video.id %>
		</div>


		<div class="playPauseButtonContainer">
			<button id="playPause" class="play_pause btn btn-primary btn-lg"><span class="glyphicon glyphicon-play"></span><span class="glyphicon glyphicon-pause"></span></button>
		</div>

		
	</div>

</div>



